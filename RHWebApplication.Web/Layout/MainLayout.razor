@using System.Security.Claims
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject CompanyService CompanyService
@inject IDialogService DialogService
@inherits LayoutComponentBase

<MudThemeProvider Theme="@currentTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider /> 

<MudLayout>
       <MudAppBar Class="d-flex align-items-center" Color="Color.Primary" Fixed="true" Elevation="25" >
       <MudIconButton Disabled="@_notLogged" hidden="@_notLogged" Icon="@arrowMenu" Color="Color.Inherit" Class="white-icon" OnClick="DrawerToggle" />
       <MudText Typo="Typo.h4">TEST APPLICATION</MudText>
       <MudSpacer />
        @{
            if (_isStaff)
            {
                <MudButton Class="mr-10" Variant="Variant.Filled" Color="Color.Secondary" OnClick="CompanyRegister">Company Register</MudButton>
                <MudPaper hidden="@(!_isStaff)" Class="text-align-center" Style="width: 200px; text-align: end; margin-right: 35px;" >
                    <MudSelect Dense="true" @bind-Value="UserInfo.Company" Label="Company">
                        <MudSelectItem Value="string.Empty">Show All</MudSelectItem Elevation="15">
                        @{
                            foreach (var company in _companyList)
                            {
                                if (company is not null)
                                {
                                    <MudSelectItem Value="@company">@company</MudSelectItem>
                                }
                            }
                        }
                    </MudSelect>
                </MudPaper>
            }
            else
            {
                <MudText hidden="@_isStaff" Style="margin-right: 35px;">@UserInfo.Company</MudText>
            }
        }
        <MudText Class="dropend" Typo="Typo.h6">@UserInfo.UserName</MudText>
        <MudButton Disabled="@_logged" hidden="@_logged" OnClick="GoToLogin" Color="Color.Warning">Login</MudButton>
        <MudButton Disabled="@_notLogged" hidden="@_notLogged" OnClick="LogoutAsync" Color="Color.Warning">Logout</MudButton>
        </MudAppBar>
        <MudDrawer Class="menu-section" Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="10">
            <CascadingValue Value="UserInfo">
                <NavMenu />
            </CascadingValue>
        </MudDrawer>
        <MudMainContent Class="menu-content">
            <CascadingValue Value="UserInfo">
                <ChildComponent />
                @Body
            </CascadingValue>

        </MudMainContent>
</MudLayout>

@code {
    private List<string> _companyList = new();
    private UserInfo UserInfo = new();
    private string _userCompany = string.Empty;
    private bool _isStaff = false;
    private bool _drawerOpen = false;
    private bool _notLogged = true;
    private bool _logged = false;
    private string arrowMenu = Icons.Material.Filled.KeyboardDoubleArrowLeft;

    private MudTheme currentTheme = new MudTheme()
        {
            PaletteLight = RHApplicationPalette.CreatePallete
        };

    protected override async Task OnParametersSetAsync()
    {

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var role = await AuthStateProvider.GetClaim("role");
            if(role is not null)
            {
                UserInfo.Role = role;
                if (role == "Staff")
                    _isStaff = true;
            }

            if (_isStaff)
            {
                var companys = await CompanyService.GetCompanyNames();
                if (companys is not null)
                    _companyList = companys;
            }
            var id = await AuthStateProvider.GetClaim("id");
            if (id is not null)
                UserInfo.Id = int.Parse(id);

            var company = await AuthStateProvider.GetClaim("company");
            if (company is not null)
            {
                if (!_isStaff)
                    UserInfo.Company = company;
            }

            if (user.Identity.Name is not null)
                UserInfo.UserName = user.Identity.Name;

            arrowMenu = _drawerOpen ? Icons.Material.Filled.KeyboardDoubleArrowLeft : Icons.Material.Filled.KeyboardDoubleArrowRight;
            _logged = true;
            _notLogged = false;
            _drawerOpen = true;
        }
    }

    async Task CompanyRegister()
    {
        var dialog = DialogService.Show<CompanyRegister>(null, new DialogParameters());
        var result = await dialog.Result;
        if (result != null && result.Data != null)
        {
            var newCompany = (CompanyRequest)result.Data;
            _companyList.Add(newCompany.TradeName);

        }
    }

    void GoToLogin()
    {
        NavigationManager.NavigateTo("/Login");
    }
    async Task LogoutAsync()
    {
        _isStaff = false;
        UserInfo = new();
        _logged = false;
        _notLogged = true;
        _drawerOpen = false;
        await AuthStateProvider.Logout();
        NavigationManager.NavigateTo("/Login");
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        arrowMenu = _drawerOpen ? Icons.Material.Filled.KeyboardDoubleArrowLeft : Icons.Material.Filled.KeyboardDoubleArrowRight;
    }

}