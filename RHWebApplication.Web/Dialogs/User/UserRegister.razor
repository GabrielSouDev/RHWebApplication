@inject NavigationManager NavigationManager
@inject JobService JobService
@inject AdminService AdminService
@inject EmployeeService EmployeeService
@inject CompanyService CompanyService
@inject CustomAuthStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@namespace RHWebApplication.Web.Dialogs

<MudDialog>
	<DialogContent>
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        }
        else
        {
            <MudForm Style="width: 400px;" Class="p-5" Model="@_userRequest">
                <MudText Class="align-center" Typo="Typo.h5">Register a User</MudText>
                <MudTextField @bind-Value="_userRequest.Name" Label="Name" Required="true" />
                <MudTextField @bind-Value="_userRequest.Login" Label="Login" Required="true" />
                <MudTextField @bind-Value="_userRequest.Password" Label="Password" InputType="InputType.Password" Required="true" />
                <MudTextField @bind-Value="_userRequest.Email" Label="Email" For="@(()=> _userRequest.Email)" Required="true" />
                <MudSwipeArea Class="pt-6 d-flex justify-center flex-grow-1 gap-4 align-center">
                    <MudText Align="Align.Center">Employee</MudText>
                    <MudSwitch Color="Color.Primary" @bind-Value="_IsAdmin" />
                    <MudText Align="Align.Center">Admin</MudText>
                </MudSwipeArea>

                <MudTextField Disabled="@(_IsAdmin)" T="int" @bind-Value="_userRequest.Dependents" Label="Dependents" Required="@(!_IsAdmin)" />
                <MudSelect Disabled="@(_IsAdmin)" @bind-Value="_userRequest.JobTitle" Label="Job Title" Required="@(!_IsAdmin)">
                    @{
                        foreach (var job in _jobList)
                        {
                            if (job is not null)
                            {
                                <MudSelectItem Value="@job">@job</MudSelectItem>
                            }
                        }
                    }
                </MudSelect>
            </MudForm>
        }
        <MudText Color="Color.Error">@_errorMenssage</MudText>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel" Color="Color.Error">Cancel</MudButton>
		<MudButton OnClick="Register" Color="Color.Primary">Register</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter]
	MudDialogInstance MudDialog { get; set; } = new();
    [Parameter]
    public string? Company { get; set; } = string.Empty;

    private EmployeeRequest _userRequest = new();
    private bool _IsAdmin = false;
    private string _errorMenssage = string.Empty;
    private List<string> _jobList = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadJobsAsync();
    }

    private async Task LoadJobsAsync()
    {
        _isLoading = true;
        var jobs = await JobService.GetJobTitlesByCompany(Company);
        if (jobs is not null)
            _jobList = jobs;
        _isLoading = false;
        StateHasChanged();
    }
	private async Task Register()
	{
        _errorMenssage = string.Empty;
        HttpResponseMessage? response = null;
        if (_IsAdmin) //admin
        {
            AdminRequest adminRequest = new(_userRequest.Login, _userRequest.Password, _userRequest.Name, _userRequest.Email, _userRequest.CompanyTradeName);
            response = await AdminService.PostAdmin(adminRequest);
        }
        else //employee
        {
            if (_userRequest.JobTitle is not null)
            {
                response = await EmployeeService.PostEmployee(_userRequest);
            }
            else
            {
                _errorMenssage = "Necessary choice a Job Title to register a employee!";
                Snackbar.Add("Necessary choice a Job Title to register a employee!", Severity.Error);
            }
        }

        if (response is not null)
        {
            if (!response.IsSuccessStatusCode)
            {
                if (response.RequestMessage is not null)
                {
                    _errorMenssage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add("User has not Registred!", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("User has been successfully Registered!", Severity.Success);
            }
        }
        MudDialog.Close(DialogResult.Ok(_userRequest));
	}

	private void Cancel()
	{
		MudDialog.Cancel();
	}
}
