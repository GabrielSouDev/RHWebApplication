@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject PayrollService PayrollService
@inject ISnackbar Snackbar
@namespace RHWebApplication.Web.Dialogs

<MudDialog>
	<DialogContent>
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        }
        else
        {
            <MudForm Model="@_payrollRequest">
                <MudText Class="align-center" Typo="Typo.h5">Register a Payroll</MudText>
                <MudSelect @bind-Value="_employeeSelectedName" Label="Employee Name">
                    @{
                        foreach (var employee in _employeeList)
                        {
                            if (employee is not null)
                            {
                                <MudSelectItem Value="@employee">@employee</MudSelectItem>
                            }
                        }
                    }
                </MudSelect>
                <MudPaper Class="d-flex grow-1 gap-4">
                    <MudText Class="flex-initial">OverTime:   </MudText>
                    <MudNumericField Class="flex-initial" HideSpinButtons="true"
                                     Style="width:30px;" T="float"
                                     @bind-Value="_overTimeHours"
                                     Placeholder="HH"
                                     Format="N0"
                                     MaxLength="2" />
                    <MudText Class="flex-initial"> : </MudText>
                    <MudNumericField Class="flex-initial" HideSpinButtons="true"
                                     Style="width:30px;" T="float"
                                     @bind-Value="_overTimeMinutes"
                                     Placeholder="MM"
                                     Format="N0"
                                     MaxLength="2" />
                </MudPaper>
                <MudTextField Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                              @bind-Value="_payrollRequest.Commission"
                              Label="Commission"
                              Required="true" />
            </MudForm>
            <MudText Color="Color.Error">@_errorMenssage</MudText>
        }
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel" Color="Color.Error">Cancel</MudButton>
		<MudButton OnClick="Register" Color="Color.Primary">Register</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter]
	MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public string? Company { get; set; } = string.Empty;

    private PayrollRequest _payrollRequest = new();
    private string _employeeSelectedName = string.Empty;
    private List<string> _employeeList = new();
    private float _overTimeHours = 0;
    private float _overTimeMinutes = 0;
    private string _errorMenssage = string.Empty;
    List<EmployeeResponse> _employees = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeesAsync();
    }

    private async Task LoadEmployeesAsync()
    {
        _isLoading = true;
        var employees = await EmployeeService.GetEmployeesByCompany(Company);
        if (employees is not null)
        {
            _employees = employees;
            _employeeList = _employees.Select(e => e.Name).ToList();
        }
        _isLoading = false;
        StateHasChanged();
    }

	private async Task Register()
	{
        _errorMenssage = string.Empty;
        var employee = _employees.FirstOrDefault(e => e.Name == _employeeSelectedName);
        if (employee is not null)
        {
            _payrollRequest.EmployeeId = employee.Id;
            if (ValidateOverTime())
            {
                HttpResponseMessage? response;
                Console.WriteLine(_payrollRequest);
                response = await PayrollService.PostPayroll(_payrollRequest);

                if (!response.IsSuccessStatusCode)
                {
                    if (response.RequestMessage is not null)
                        _errorMenssage = await response.Content.ReadAsStringAsync();
                }
                else
                {
                    Snackbar.Add("Payroll has been successfully Registered!", Severity.Success);
                }
            }
        }
        else
        {
            _errorMenssage = "Necessary choice a employee name to register a payroll!";
            Snackbar.Add("Necessary choice a employee name to register a payroll!", Severity.Error);
        }
        MudDialog.Close(DialogResult.Ok(_payrollRequest));
	}

	private void Cancel()
	{
		MudDialog.Cancel();
	}

    public bool ValidateOverTime()
    {
        if (_overTimeHours >= 0 && _overTimeHours <= 99)
        {
            if (_overTimeMinutes >= 0 && _overTimeMinutes <= 59)
            {
                _payrollRequest.OverTime = _overTimeHours + _overTimeMinutes;
                return true;
            }
            _errorMenssage = "Minutes needs be inferior 59!";
            Snackbar.Add("Minutes needs be inferior 59!", Severity.Error);
            return false;
        }
        else
        {
            _errorMenssage = "Hours needs be inferior 99!";
            Snackbar.Add("Hours needs be inferior 99!", Severity.Error);
            return false;
        }
    }
}