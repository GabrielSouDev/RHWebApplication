@page "/PayrollList"

@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject PayrollService PayrollService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Payrolls List</PageTitle>
<AuthorizeView>
    <Authorized Context="authContext">
        @if (_isLoading)
        {
            <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh">
                <MudProgressCircular 
                    Color="Color.Primary" 
                    Indeterminate="true" 
                    Size="Size.Large" />
            </MudContainer>
        }
        else
        {
            <MudDataGrid 
                Class="pl-5"
                Height="80vh" 
                Dense="true" T="PayrollResponse"
                Items="_payrollsSelected" 
                QuickFilter="@_quickFilter" 
                Striped="true" 
                Bordered="true" 
                Elevation="25">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Payroll List</MudText>
                    <MudSpacer />
                    <MudButton Disabled="@UserInfo.Role.Equals("Employee")" Class="mr-10" Variant="Variant.Filled" Color="Color.Warning" OnClick="PayrollRegister">Payroll Register</MudButton>
                    <MudSelect Disabled="@UserInfo.Role.Equals("Employee")" @bind-Value="_employeeSelectedName" >
                        <MudSelectItem Value="@string.Empty">Show All</MudSelectItem>
                        @{
                            foreach (var employee in _employeeList)
                            {
                                if (employee is not null)
                                {
                                    if(employee != "")
                                    {
                                        <MudSelectItem Value="@employee">@employee</MudSelectItem>

                                    }
                                    else
                                    {

                                    }
                                }
                            }
                        }
                    </MudSelect>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Editable="false" Property="x => x.Id" />
                    <PropertyColumn Property="x => x.EmployeeName" />
                    <PropertyColumn Property="x => x.JobTitle" />
                    <PropertyColumn Property="x => x.CompanyTradeName" />
                    <PropertyColumn Property="x => x.CreationDate" />
                    <TemplateColumn Title="Options" StickyRight="true">
                        <CellTemplate Context="cellContext">
                            <MudButton Color="Color.Warning" Variant="Variant.Filled" 
                                       OnClick="() => DetailsPayroll(cellContext.Item)" >Details</MudButton>
                            <MudFab Disabled="@UserInfo.Role.Equals("Employee")" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" IconColor="Color.Surface" Size="@Size.Small"
                                    OnClick="() => DeleteUserAsync(cellContext.Item)" />
                        </CellTemplate> 
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="PayrollResponse" />
                </PagerContent>
            </MudDataGrid>
        }
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public UserInfo UserInfo { get; set; } = new();
    private List<PayrollResponse> _payrolls = new();
    private List<PayrollResponse> _payrollsSelected = new();

    List<EmployeeResponse> _employees = new();
    private List<string> _employeeList = new();
    private string _employeeSelectedName = string.Empty;
    private bool _isLoading = true;
    private string _previousCompany = string.Empty;
    private string _previousEmployeeSelectedName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _previousEmployeeSelectedName = string.Empty;
        _previousCompany = UserInfo.Company;
        await LoadPayrollsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (UserInfo.Company != null && UserInfo.Company != _previousCompany || _employeeSelectedName != _previousEmployeeSelectedName)
        {
            _previousCompany = UserInfo.Company;
            await LoadPayrollsAsync();
        }
    }

    private async Task PayrollRegister()
    {
        var parameters = new DialogParameters { ["Company"] = UserInfo.Company };
        var dialog = DialogService.Show<PayrollRegister>(null, parameters);
        var result = await dialog.Result;
        if (result != null && result.Data != null)
        {
            await LoadPayrollsAsync();
        }
    }

    private async Task LoadPayrollsAsync()
    {
        _isLoading = true;
        var employees = await EmployeeService.GetEmployeesNamesByCompany(UserInfo.Company);
        List<PayrollResponse> payrolls;
        if (employees is not null)
            _employeeList = employees;

        if(UserInfo.Role == "Employee")
        {
            payrolls = await PayrollService.GetPayrollsByEmployee(UserInfo.Id);

        }
        else
        {
            if (UserInfo.Company == string.Empty)
            {
                payrolls = await PayrollService.GetPayrolls();
            }else
                payrolls = await PayrollService.GetPayrollsByCompany(UserInfo.Company);

            if (_employeeSelectedName != string.Empty)
            {
                payrolls = payrolls.Where(p => p.EmployeeName.Contains(_employeeSelectedName)).ToList();
            }    
        }

        if (payrolls is not null)
        {
            _payrolls = payrolls;
            _payrollsSelected = _payrolls;
        }

        _isLoading = false;
        StateHasChanged();
    }

    private Func<PayrollResponse, bool> _quickFilter => x =>
    {

        if (string.IsNullOrWhiteSpace(_employeeSelectedName))
            return true;



        if (x.EmployeeName.Contains(_employeeSelectedName, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    private void DetailsPayroll(PayrollResponse payroll)
    {
        DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };
        var parameters = new DialogParameters { ["Payroll"] = payroll };
        var dialog = DialogService.Show<DetailsPayrollDialog>(null, parameters, maxWidth); // criar dialog para deletar Payroll
    }

    private async Task DeleteUserAsync(PayrollResponse payroll)
    {
        var parameters = new DialogParameters { ["Payroll"] = payroll };
        var dialog = DialogService.Show<DeletePayrollDialog>(null, parameters); // criar dialog para deletar Payroll
        var result = await dialog.Result;
        if(result is not null)
        {
            if (!result.Canceled)
            {
                var response = await PayrollService.DeletePayroll(payroll.Id);
                if (response.IsSuccessStatusCode)
                {
                    _payrolls.Remove(payroll);
                    _payrollsSelected.Remove(payroll);
                    Snackbar.Add("Payroll has been Deleted!", Severity.Success);
                }
                else Snackbar.Add("Payroll has not altered!", Severity.Error);
            }
        }
        else Snackbar.Add("Payroll has not altered!", Severity.Error);
    }
}