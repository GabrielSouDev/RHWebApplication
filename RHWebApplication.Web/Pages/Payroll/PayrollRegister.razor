@page "/PayrollRegister"
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject PayrollService PayrollService
@inject ISnackbar Snackbar

<PageTitle> Register a Payroll</PageTitle>
<AuthorizeView Roles="Admin, Staff">
    <Authorized Context="authContext">
        <MudCard Class="pt-5 pl-10" Style="width: 100%; height: 93vh;">
            <MudCardContent Class="start" Style="width: 50%;">
                @if (_isLoading)
                {
                    <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                    </MudContainer>
                }
                else
                {
                    <MudCard Style="width: 50%;">
                        <MudCardContent>
                            <MudForm Model="@_payrollRequest">
                                <MudText Class="align-center" Typo="Typo.h5">Register a Payroll</MudText>
                                <MudSelect @bind-Value="_employeeSelectedName" Label="Employee Name">
                                    @{
                                        foreach (var employee in _employeeList)
                                        {
                                            if (employee is not null)
                                            {
                                                <MudSelectItem Value="@employee">@employee</MudSelectItem>
                                            }
                                        }
                                    }
                                </MudSelect>
                                <MudPaper Class="d-flex grow-1 gap-4">
                                    <MudText Class="flex-initial">OverTime:   </MudText>
                                    <MudNumericField Class="flex-initial" HideSpinButtons="true"
                                                     Style="width:30px;" T="float"
                                                     @bind-Value="_overTimeHours"
                                                     Placeholder="HH"
                                                     Format="N0" 
                                                     MaxLength="2"/>
                                    <MudText Class="flex-initial"> : </MudText>
                                    <MudNumericField Class="flex-initial" HideSpinButtons="true"
                                                     Style="width:30px;" T="float"
                                                     @bind-Value="_overTimeMinutes"
                                                     Placeholder="MM"
                                                     Format="N0"
                                                     MaxLength="2" />
                                </MudPaper>
                                <MudTextField Adornment="Adornment.Start" 
                                              AdornmentIcon="@Icons.Material.Filled.AttachMoney" 
                                              @bind-Value="_payrollRequest.Commission" 
                                              Label="Commission" 
                                              Required="true" />
                                <MudButton type="Submit" OnClick="SubmitPayrollAsync" Color="Color.Primary">Submit</MudButton>
                            </MudForm>
                            <MudText Color="Color.Error">@_errorMenssage</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </MudCardContent>
        </MudCard>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    public UserInfo UserInfo { get; set; } = new();

    private PayrollRequest _payrollRequest = new();
    private string _employeeSelectedName = string.Empty;
    private List<string> _employeeList = new();
    private float _overTimeHours = 0;
    private float _overTimeMinutes = 0;
    private string _errorMenssage = string.Empty;
    List<EmployeeResponse> _employees = new();
    private bool _isLoading = true;
    private string _previousCompany;

    protected override async Task OnInitializedAsync()
    {
        _previousCompany = UserInfo.Company;
        LoadEmployeesAsync();
    }


    protected override void OnParametersSet()
    {
        if (UserInfo.Company != null && UserInfo.Company != _previousCompany)
        {
            _previousCompany = UserInfo.Company;
            _ = LoadEmployeesAsync();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        _isLoading = true;
        var employees = await EmployeeService.GetEmployeesByCompany(UserInfo.Company);
        if (employees is not null)
        {
            _employees = employees;
            _employeeList = _employees.Select(e => e.Name).ToList();
        }
        _isLoading = false;
        StateHasChanged();
    }
    public async Task SubmitPayrollAsync()
    {
        _errorMenssage = string.Empty;
        var employee = _employees.FirstOrDefault(e => e.Name == _employeeSelectedName);
        if (employee is not null)
        {
            _payrollRequest.EmployeeId = employee.Id;
            if (ValidateOverTime())
            {
                HttpResponseMessage? response;
                Console.WriteLine(_payrollRequest);
                response = await PayrollService.PostPayroll(_payrollRequest);

                if (!response.IsSuccessStatusCode)
                {
                    if (response.RequestMessage is not null)
                        _errorMenssage = await response.Content.ReadAsStringAsync();
                }
                else
                {
                    Snackbar.Add("Payroll has been successfully Registered!", Severity.Success);
                    _payrollRequest = new();
                    _employeeSelectedName = string.Empty;
                    _overTimeHours = 0;
                    _overTimeMinutes = 0;
                }
            }
        }
        else
        {
            _errorMenssage = "Necessary choice a employee name to register a payroll!";
            Snackbar.Add("Necessary choice a employee name to register a payroll!", Severity.Error);
        }
    }
    public bool ValidateOverTime()
    {
        if (_overTimeHours >= 0 && _overTimeHours <= 99)
        {
            if (_overTimeMinutes >= 0 && _overTimeMinutes <= 59)
            {
                _payrollRequest.OverTime = _overTimeHours + _overTimeMinutes;
                return true;
            }
            _errorMenssage = "Minutes needs be inferior 59!";
            Snackbar.Add("Minutes needs be inferior 59!", Severity.Error);
            return false;
        }
        else
        {
            _errorMenssage = "Hours needs be inferior 99!";
            Snackbar.Add("Hours needs be inferior 99!", Severity.Error);
            return false;
        }
    }
}
