@inject NavigationManager NavigationManager
@inject UserService UserService
@inject EmployeeService EmployeeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@page "/UserList"

<PageTitle>User List</PageTitle>
<AuthorizeView Roles="Admin, Staff">
    <Authorized Context="authContext">
        @if (_isLoading)
        {
            <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            </MudContainer>
        }
        else
        {
            <MudDataGrid
                Class="pl-5"
                Height="80vh" 
                Dense="true" 
                T="UserResponse" 
                Items="_users" 
                Striped="true" 
                Bordered="true" 
                QuickFilter="@_quickFilter" 
                Elevation="25">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">User List</MudText>
                    <MudSpacer />
                    <MudButton Disabled="@UserInfo.Role.Equals("Employee")" Class="mr-10" Variant="Variant.Filled" Color="Color.Warning" OnClick="UserRegister">User Register</MudButton>
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" 
                        Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Title="Id" Editable="false" Property="x => x.Id" />
                    <PropertyColumn Title="Name" Property="x => x.Name" />
                    <PropertyColumn Title="Login" Property="x => x.Login" />
                    <PropertyColumn Title="E-mail" Property="x => x.Email" />
                    <PropertyColumn Title="Creation Date" Property="x => x.CreationDate" />
                    <PropertyColumn Title="User Type" Property="x => x.UserType" />
                    <PropertyColumn Title="Company" Property="x => x.CompanyTradeName" />
                    <PropertyColumn Title="Active" Property="x => x.IsActive" />
                    <TemplateColumn Title="Options" StickyRight="true">
                        <CellTemplate Context="cellContext">
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Edit" IconColor="Color.Surface" Size="@Size.Small" 
                                OnClick="() => EditUserDialogAsync(cellContext.Item)" />
                            <MudFab Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" IconColor="Color.Surface" Size="@Size.Small" 
                                OnClick="() => DeleteUserAsync(cellContext.Item)" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="UserResponse" />
                </PagerContent>
            </MudDataGrid>
        }
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public UserInfo UserInfo { get; set; } = new();
    private List<UserResponse> _users = new();
    private string? _searchString;
    private List<string> _events = new();
    private bool _isLoading = true;
    private string _previousCompany = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _previousCompany = UserInfo.Company;
        await LoadUsersAsync();
    }

    protected override void OnParametersSet()
    {
        if (UserInfo.Company != null && UserInfo.Company != _previousCompany)
        {
            _previousCompany = UserInfo.Company;
            _ = LoadUsersAsync();
        }
    }

    private async Task LoadUsersAsync()
    {
        _isLoading = true;
        var userList = await UserService.GetUsersByCompany(UserInfo.Company);
        if (userList is not null)
        {
            _users = userList;
        }
        _isLoading = false;
        StateHasChanged();
    }

    private async Task UserRegister()
    {
        var parameters = new DialogParameters { ["Company"] = UserInfo.Company };
        var dialog = DialogService.Show<UserRegister>(null, parameters);
        var result = await dialog.Result;
        if (result != null && result.Data != null)
        {
            await LoadUsersAsync();
        }
    }

    private Func<UserResponse, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Login.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task EditUserDialogAsync(UserResponse user) // dividir edição de employee e admin
    {
        if(user.UserType == "Employee")
        {
            var employee = await EmployeeService.GetEmployeeById(user.Id);
            EmployeeRequest employeeRequest = new(employee.Id, employee.Login, string.Empty, employee.Name, employee.Email, employee.Dependents, employee.JobTitle, employee.CompanyTradeName);
            var parameters = new DialogParameters { ["employeeRequest"] = employeeRequest };
            var dialog = DialogService.Show<EditEmployeeDialog>(null, parameters);

        }else
        {
            UserRequest userRequest = new(user.Id, user.Login, string.Empty, user.Name, user.Email, user.CompanyTradeName);
            var parameters = new DialogParameters { ["userRequest"] = userRequest };
            var dialog = DialogService.Show<EditUserDialog>(null, parameters);
        }
        await LoadUsersAsync();
    }

    private async Task DeleteUserAsync(UserResponse user)
    {
        var parameters = new DialogParameters { ["login"] = user.Name };
        var dialog = DialogService.Show<DeleteUserDialog>(null, parameters);
        var result = await dialog.Result;
        if(result is not null)
        {
            if (!result.Canceled)
            {
                var response = await UserService.DeleteUser(user.Id);
                if (response.IsSuccessStatusCode)
                {
                    if(_users.Contains(user))
                    {
                        _users.Remove(user);
                        Snackbar.Add("User has been Deleted!", Severity.Success);
                    }
                }
                else Snackbar.Add("User has not altered!", Severity.Error);
            }
            else Snackbar.Add("User has not altered!", Severity.Error);
        }
    }
}