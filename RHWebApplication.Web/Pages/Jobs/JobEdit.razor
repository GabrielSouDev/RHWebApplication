@using RHWebApplication.Web.Dialogs.Job
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@page "/JobList"


<PageTitle>jobTitle List</PageTitle>
<AuthorizeView>
    <Authorized Context="authContext">
        <MudContainer>
            <MudDataGrid Dense="true" T="JobResponse" Items="jobs" Bordered="true" QuickFilter="@_quickFilter" >
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Edit a JobTitle</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Id" />
                    <PropertyColumn Property="x => x.Title" />
                    <PropertyColumn Property="x => x.Description" />
                    <PropertyColumn Property="x => x.IsUnhealthy" />
                    <PropertyColumn Property="x => x.IsPericulosity" />
                    <PropertyColumn Property="x => x.BaseSalary" />
                    <TemplateColumn StickyRight="true">
                        <CellTemplate Context="cellContext">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" OnClick="() => EditJobDialogAsync(cellContext.Item)" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" OnClick="() => DeleteJobAsync(cellContext.Item)" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="JobResponse" />
                </PagerContent>
            </MudDataGrid>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<JobResponse>? jobs;
    private string? _searchString;
    private List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        var jobList = await Http.GetFromJsonAsync<List<JobResponse>>("Job");
        if(jobList is not null)
        {
            jobs = jobList;
        }
    }

    private Func<JobResponse, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task EditJobDialogAsync(JobResponse job)
    {
        var parameters = new DialogParameters { ["job"] = job };
        var dialog = DialogService.Show<EditJobDialog>(null, parameters);
        var result = await dialog.Result;
        var updatedJob = (JobResponse)result.Data;

        if (!result.Canceled && updatedJob != null)
        {
            var response = await Http.PutAsJsonAsync("/job", updatedJob);

            if(response.IsSuccessStatusCode)
            {
                var index = jobs.FindIndex(j => j.Id == updatedJob.Id);
                if (index != -1)
                {
                    jobs[index] = updatedJob;
                }
                Snackbar.Add("JobTitle has been Updated!", Severity.Success);
            }
            else Snackbar.Add("JobTitle has not altered!", Severity.Error);
        }
        else Snackbar.Add("JobTitle has not altered!", Severity.Error);
    }

    private async Task DeleteJobAsync(JobResponse job)
    {
        var parameters = new DialogParameters { ["jobTitle"] = job.Title };
        var dialog = DialogService.Show<DeleteJobDialog>("", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var response = await Http.DeleteAsync($"/job/{job.Id}");
            if (response.IsSuccessStatusCode)
            {
                jobs.Remove(job);

                Snackbar.Add("JobTitle has been Deleted!", Severity.Success);
            }
            else Snackbar.Add("JobTitle has not altered!", Severity.Error);
        }
        else Snackbar.Add("JobTitle has not altered!", Severity.Error);
    }
}
