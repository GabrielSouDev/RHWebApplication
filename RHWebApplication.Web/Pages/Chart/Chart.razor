@namespace RHWebApplication.Web.Pages.Charts
@page "/Charts"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using RHWebApplication.Web.Pages.Charts

<PageTitle>Payrolls List</PageTitle>

<AuthorizeView Roles="Admin, Staff">
    <Authorized Context="authContext">
        <MudPaper Class="pa-5" MinHeight="93vh" Style="height: auto;">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Secondary" 
                    OnClick="() => AddChart(new EmployeeCost())">Add Employee Cost Dashboard</MudButton>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Secondary"
                           OnClick="() => AddChart(new EmployeeCostPerMonth())">Add Employee Cost Per Mounth Dashboard</MudButton>
                </MudItem>
                <CascadingValue Value="this">
                    @foreach (var Chart in _chartList)
                    {
                        if(Chart.Value is EmployeeCost)
                        {
                            <MudItem xs="12" sm="6" id="@Chart.Key.ToString()">
                                <EmployeeCost Id="Chart.Key" />
                            </MudItem>
                        }
                        else if (Chart.Value is EmployeeCostPerMonth)
                        {
                            <MudItem xs="12" sm="6" id="@Chart.Key.ToString()">
                                <EmployeeCostPerMonth Id="Chart.Key" />
                            </MudItem>
                        }
                    }
                </CascadingValue>
            </MudGrid>

        </MudPaper>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>
<script>
    function removeChart(id)
    {
        const chart = document.getElementById(id);
        chart.remove();
    }
</script>
@code {
    private Dictionary<int, object> _chartList = new();

    public void RemoveChart(int id)
    {
        JSRuntime.InvokeVoidAsync("removeChart", id.ToString());
    }

    private void AddChart(object chart)
    {
        if (_chartList.Count == 0)
        {
            _chartList.Add(0, chart);
        }else
        {
            var i = _chartList.Last().Key + 1;
            _chartList.Add(i, chart);
        }
    }
}