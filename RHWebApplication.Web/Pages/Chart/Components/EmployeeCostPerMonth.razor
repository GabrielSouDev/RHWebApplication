@namespace RHWebApplication.Web.Pages.Charts
<MudGrid style="position: relative; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
    <MudItem xs="12">
        <CascadingValue Value="this">
            <PayrollFilter />
        </CascadingValue>
    </MudItem>
    @if (_isLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh">
            <MudProgressCircular Color="Color.Primary"
                                 Indeterminate="true"
                                 Size="Size.Large" />
        </MudContainer>
    }
    else
    {
        <MudItem xs="12" sm="8">
            <MudText Typo="Typo.h6">Employee Cost Per Month Dashboard</MudText>
            <MudChart ChartType="ChartType.Line" Height="400px" ChartSeries="Series" InputLabels="@_labels.ToArray()" LegendPosition="Position.Right"/>
        </MudItem>

        <MudItem Class="pa-5" xs="12" sm="4">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="() => _hidePayrollList = !_hidePayrollList" Color="Color.Secondary">Payroll List</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudButton Variant="Variant.Filled" OnClick="() => Charts.RemoveChart(Id)" Color="Color.Error" style="position:absolute; top: 10px; right: 10px;">X</MudButton>

        <MudContainer Class="pa-5" hidden="@_hidePayrollList" style="border: 2px solid black; border-radius: 15px; background-color:snow; position:absolute; top: 0; right: 0; width:auto; height:475px; overflow:scroll;">
            @foreach (var payroll in _payrollsSelected)
            {
                <p style="color:red; font-size:20px; font-weight:400; text-align:right;">@payroll.EmployeeName - @payroll.CreationDate</p>
            }
        </MudContainer>

        <MudButton hidden="@_hidePayrollList" Variant="Variant.Filled" OnClick="() => _hidePayrollList = !_hidePayrollList" Color="Color.Secondary" style="position:absolute; bottom: 10px; right: 10px;">Close</MudButton>
    }
</MudGrid>
@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Chart Charts { get; set; } = new();

    public List<PayrollResponse> _payrollsSelected = new();

    public bool _isLoading = true;

    public List<ChartSeries> Series = new List<ChartSeries>();

    private string[] _labels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    private bool _hidePayrollList = true;


    public void LoadChart(List<PayrollResponse> payrollsSelected)
    {
        List<double> _datas = new List<double>();

        //_payrollsSelected 
        var aadww = payrollsSelected.GroupBy(p => p.EmployeeName);

        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.OverTimeAditionals).Sum()));
        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.PericulosityValue).Sum()));
        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.UnhealthyValue).Sum()));
        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.Commission).Sum()));
        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.INSSDeduction).Sum()));
        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.IRRFDeduction).Sum()));
        _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.BaseSalary).Sum()));

        _isLoading = false;
        StateHasChanged();
    }
}
