@inherits ChartBase

@namespace RHWebApplication.Web.Pages.Charts

<MudGrid style="position: relative; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
    <MudItem xs="12">
        <CascadingValue Value="this">
            <PayrollFilter />
        </CascadingValue>
    </MudItem>
    @if (_isLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 455px">
            <MudProgressCircular Color="Color.Primary"
                                 Indeterminate="true"
                                 Size="Size.Large" />
        </MudContainer>
    }
    else
    {
        <MudText style="position:absolute; top: 150px; left: 10px;">Thousand</MudText>

        <MudItem xs="12">
            <MudText Typo="Typo.h6">Employee Cost Per Month Dashboard</MudText>
            <MudChart ChartType="ChartType.Line" Height="400px" ChartSeries="Series" LegendPosition="Position.Right" XAxisLabels="@_labels.ToArray()" ChartOptions="_chartOptions" >
                <CustomGraphics >

                </CustomGraphics>
            </MudChart>
        </MudItem>

        <MudButton style="position:absolute; top: 75px; right: 10px;" Variant="Variant.Filled" OnClick="() => _hidePayrollList = !_hidePayrollList" Color="Color.Warning">Payroll List</MudButton>

        <MudButton Variant="Variant.Filled" OnClick="() => Charts.RemoveChart(Id)" Color="Color.Error" style="position:absolute; top: 10px; right: 10px;">X</MudButton>

        <MudContainer Class="pa-5" hidden="@_hidePayrollList" style="border: 2px solid black; border-radius: 15px; background-color:snow; position:absolute; top: 0; right: 0; width:auto; height:475px; overflow:scroll;">
            @foreach (var payroll in _payrollsSelected)
            {
                <p style="color:red; font-size:20px; font-weight:400; text-align:right;">@payroll.EmployeeName - @payroll.CreationDate</p>
            }
        </MudContainer>

        <MudButton hidden="@_hidePayrollList" Variant="Variant.Filled" OnClick="() => _hidePayrollList = !_hidePayrollList" Color="Color.Secondary" style="position:absolute; bottom: 10px; right: 10px;">Close</MudButton>
    }
</MudGrid>
@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Chart Charts { get; set; } = new();

    public List<PayrollResponse> _payrollsSelected = new();

    private bool _isLoading = true;

    public override bool IsLoading
    {
        get => _isLoading;
        set => _isLoading = value;
    }

    private List<ChartSeries> Series = new();
    private ChartOptions _chartOptions = new()
    {
        YAxisTicks = 1
    };
    private string[] _labels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    private bool _hidePayrollList = true;

    public override void LoadChart(List<PayrollResponse> payrollsSelected)
    {
        Series.Clear();
        _payrollsSelected = payrollsSelected;
        var payrollDictionary = payrollsSelected.GroupBy(p => p.EmployeeName);
        int i = 1;
        foreach (var employee in payrollDictionary)
        {
            List<double> value = new();
            foreach(var payroll in employee)
            {
                value.Add(Convert.ToDouble(payroll.OverTimeAditionals +
                                          payroll.PericulosityValue +
                                          payroll.UnhealthyValue +
                                          payroll.Commission +
                                          payroll.INSSDeduction +
                                          payroll.IRRFDeduction +
                                          payroll.BaseSalary
                )/1000);
            }

            Series.Add(new ChartSeries()
            {
                Name = employee.Key,
                Data =  value.ToArray()
            });
        }

        _isLoading = false;
        StateHasChanged();
    }
}
