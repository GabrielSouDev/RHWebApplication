@inherits ChartBase

@namespace RHWebApplication.Web.Pages.Charts

<MudGrid style="position: relative; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
    <MudItem xs="12">
        <CascadingValue Value="this">
            <PayrollFilter/>
        </CascadingValue>
    </MudItem>
    @if (_isLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 455px">
            <MudProgressCircular Color="Color.Primary"
                                 Indeterminate="true"
                                 Size="Size.Large" />
        </MudContainer>
    }
    else
    {
        <MudItem xs="12" sm="9">
            <MudText Typo="Typo.h6">Employee Cost Dashboard</MudText>
            <MudChart ChartType="ChartType.Donut" Height="400px" InputData="@_datas.ToArray()" InputLabels="@_labels.ToArray()" LegendPosition="Position.Right">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">Total</text>
                    <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="4">@_datas.Sum().ToString("F2")</text>
                </CustomGraphics>
            </MudChart>
        </MudItem>

        <MudItem Class="pa-5" xs="12" sm="3">
            <MudGrid>
                <MudItem xs="12">
                    <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="() => _hidePayrollList = !_hidePayrollList" Color="Color.Warning">Payroll List</MudButton>
                </MudItem>
                @foreach (var field in _chartFields)
                {
                    <MudItem xs="12" Class="pt-2">
                        <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="() => ChangeField(field.Key)" Color="@(field.Value?Color.Secondary:Color.Error)">@field.Key</MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <MudButton Variant="Variant.Filled" OnClick="() => Charts.RemoveChart(Id)" Color="Color.Error" style="position:absolute; top: 10px; right: 10px;">X</MudButton>

        <MudContainer Class="pa-5" hidden="@_hidePayrollList" style="border: 2px solid black; border-radius: 15px; background-color:snow; position:absolute; top: 0; right: 0; width:auto; height:475px; overflow:scroll;">
            @foreach (var payroll in _payrollsSelected)
            {
                <p style="color:red; font-size:20px; font-weight:400; text-align:right;">@payroll.EmployeeName - @payroll.CreationDate</p>
            }
        </MudContainer>

        <MudButton hidden="@_hidePayrollList" Variant="Variant.Filled" OnClick="() => _hidePayrollList = !_hidePayrollList" Color="Color.Secondary" style="position:absolute; bottom: 10px; right: 10px;">Close</MudButton>
    }
</MudGrid>
@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Chart Charts { get; set; } = new();

    public List<PayrollResponse> _payrollsSelected = new();

    private bool _isLoading = true;

    public override bool IsLoading
    {
        get => _isLoading;
        set => _isLoading = value;
    }

    private Dictionary<string, bool> _chartFields = new()
    {
        {"OverTime Aditionals",true },
        {"Periculosity Value",true },
        {"Unhealthy Value",true },
        {"Commission",true},
        {"INSS Deduction",true},
        {"IRRF Deduction",true},
        {"Base Salary",true}
    };
    private Dictionary<string, bool> _pvChartFields = new();

    private List<double> _datas = new();
    private List<string> _labels = new();
    private bool _hidePayrollList = true;

    private void ChangeField(string field)
    {
        _chartFields[field] =! _chartFields[field];
        LoadChart(_payrollsSelected);
    }

    public override void LoadChart(List<PayrollResponse> payrollsSelected)
    {
        
        _labels = new();
        _payrollsSelected = payrollsSelected;
        _datas = new();

        if(_chartFields["OverTime Aditionals"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.OverTimeAditionals).Sum()));
        if (_chartFields["Periculosity Value"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.PericulosityValue).Sum()));
        if (_chartFields["Unhealthy Value"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.UnhealthyValue).Sum()));
        if (_chartFields["Commission"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.Commission).Sum()));
        if (_chartFields["INSS Deduction"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.INSSDeduction).Sum()));
        if (_chartFields["IRRF Deduction"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.IRRFDeduction).Sum()));
        if (_chartFields["Base Salary"])
            _datas.Add(Convert.ToDouble(payrollsSelected.Select(p => p.BaseSalary).Sum()));

        foreach (var field in _chartFields)
        {
            if (field.Value)
                _labels.Add(field.Key);
        }
        
        _isLoading = false;
        StateHasChanged();
    }
}
