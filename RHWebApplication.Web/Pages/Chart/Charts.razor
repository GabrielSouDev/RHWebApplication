@page "/Charts"
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject JobService JobService
@inject PayrollService PayrollService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using RHWebApplication.Web.Pages.Charts

<PageTitle>Payrolls List</PageTitle>

<AuthorizeView Roles="Admin, Staff">
    <Authorized Context="authContext">
        @if (_isLoading)
        {
            <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh">
                <MudProgressCircular Color="Color.Primary"
                                     Indeterminate="true"
                                     Size="Size.Large" />
            </MudContainer>
        }
        else
        {
            <MudPaper Class="pa-5" Style="height: 93vh;">
                <MudPaper Class="d-flex flex-grow-1 gap-4">
                    <MudSelect @bind-Value="_selectedJobTitle" Label="JobTitle" ShrinkLabel="true">
                        <MudSelectItem Value="@string.Empty">Show All</MudSelectItem>
                        @foreach (var jobTitle in _jobtitlesList)
                        {
                            if (!string.IsNullOrEmpty(jobTitle))
                            {
                                <MudSelectItem Value="@jobTitle">@jobTitle</MudSelectItem>
                            }
                        }
                    </MudSelect>

                    <MudSelect @bind-Value="_selectedEmployeeName" Label="Employee" ShrinkLabel="true">
                        <MudSelectItem Value="@string.Empty">Show All</MudSelectItem>
                        @foreach (var employee in _employeeList)
                        {
                            if (!string.IsNullOrEmpty(employee))
                            {
                                <MudSelectItem Value="@employee">@employee</MudSelectItem>
                            }
                        }
                    </MudSelect>

                    <MudSelect @bind-Value="_selectedYearPayroll" Label="Year" ShrinkLabel="true">
                        <MudSelectItem Value="0">Show All</MudSelectItem>
                        @foreach (var year in _yearPayrollList)
                        {
                            <MudSelectItem Value="@year">@year</MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>

                <MudCardContent Class="d-flex justify-center">
@*                     <MudCard Style="width: 65VW">
                        <MudText Typo="Typo.h6">Employee Cost Dashboard</MudText>
                        <MudChart ChartType="ChartType.Donut" Width="400px" Height="400px"  InputData="@_datas.ToArray()"            InputLabels="@_labels.ToArray()">
                            <CustomGraphics>
                                <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black"      font-family="Helvetica" font-size="3">Total</text>
                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black"  font-family="Helvetica" font-size="4">@_datas.Sum().ToString("F2")</text>>
                            </CustomGraphics>
                        </MudChart>
                    </MudCard> *@

                    <CascadingValue Value="_payrollsSelected">
                        <EmployeeCost/>
                    </CascadingValue>
                    <MudCard Style="height: 500px; width:auto; text-align:right; color:red; font-size:8px; overflow: auto;">
                        @foreach (var payroll in _payrollsSelected)
                        {
                            <h1>@payroll.EmployeeName, @payroll.CreationDate</h1>
                        }
                    </MudCard>
                </MudCardContent>
            </MudPaper>
        }
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public UserInfo UserInfo { get; set; } = new();
    private bool _isLoading = true;
    private string _selectedEmployeeName = string.Empty;
    private string _selectedJobTitle = string.Empty;
    private int _selectedYearPayroll;
    private string _pvSelectedEmployeeName = string.Empty;
    private string _pvSelectedJobTitle = string.Empty;
    private int _pvSelectedYearPayroll;
    private string _pvCompany = string.Empty;

    private List<int> _yearPayrollList = new();
    private List<string> _employeeList = new();
    private List<string> _jobtitlesList = new();
    private List<PayrollResponse> _payrolls = new();
    private List<PayrollResponse> _payrollsSelected = new();

    private List<double> _datas = new List<double>();
    private List<string> _labels = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadPayrollsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (UserInfo.Company != _pvCompany ||
        _selectedEmployeeName != _pvSelectedEmployeeName ||
        _selectedJobTitle != _pvSelectedJobTitle ||
        _selectedYearPayroll != _pvSelectedYearPayroll)
        {
            _pvCompany = UserInfo.Company;
            _pvSelectedEmployeeName = _selectedEmployeeName;
            _pvSelectedJobTitle = _selectedJobTitle;
            _pvSelectedYearPayroll = _selectedYearPayroll;
            await LoadPayrollsAsync();
        }
    }

    private async Task LoadPayrollsAsync()
    {
        _isLoading = true;
        List<PayrollResponse> payrolls;

        // Buscar dados de folha de pagamento
        if (string.IsNullOrEmpty(UserInfo.Company))
        {
            payrolls = await PayrollService.GetPayrolls();
        }
        else
        {
            payrolls = await PayrollService.GetPayrollsByCompany(UserInfo.Company);
        }

        // Carregar lista de anos disponíveis
        _yearPayrollList = payrolls.Select(p => p.CreationDate.Year).Distinct().ToList();

        // Carregar lista de empregados e cargos
        var employees = await EmployeeService.GetEmployeesByCompany(UserInfo.Company);
        if (employees != null)
        {
            if (_selectedJobTitle is null)
            {
                _employeeList = employees.Select(e => e.Name).ToList();
            }
            else
            {
                _employeeList = employees.Where(e => e.JobTitle.Contains(_selectedJobTitle)).Select(e => e.Name).ToList();
            }
        }

        var jobtitles = await JobService.GetJobTitlesByCompany(UserInfo.Company);
        if (jobtitles != null)
        {
            _jobtitlesList = jobtitles;
        }

        // Filtrando por JobTitle, EmployeeName e Year
        if (!string.IsNullOrEmpty(_selectedJobTitle))
        {
            payrolls = payrolls.Where(p => p.JobTitle.Contains(_selectedJobTitle)).ToList();
        }

        if (!string.IsNullOrEmpty(_selectedEmployeeName))
        {
            payrolls = payrolls.Where(p => p.EmployeeName.Contains(_selectedEmployeeName)).ToList();
        }

        if (_selectedYearPayroll != 0)
        {
            payrolls = payrolls.Where(p => p.CreationDate.Year.Equals(_selectedYearPayroll)).ToList();
        }

        // Organizando os dados para o gráfico
        if (payrolls != null)
        {
            _payrollsSelected = payrolls;
            // _datas = new();
            // _labels = new();

            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.OverTimeAditionals).Sum()));
            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.PericulosityValue).Sum()));
            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.UnhealthyValue).Sum()));
            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.Commission).Sum()));
            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.INSSDeduction).Sum()));
            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.IRRFDeduction).Sum()));
            // _datas.Add(Convert.ToDouble(payrolls.Select(p => p.BaseSalary).Sum()));

            // _labels = ["OverTime Aditionals", "Periculosity Value", "Unhealthy Value", "Commission", "INSS Deduction", "IRRF Deduction", "BaseSalary"];
        }
        _isLoading = false;
        StateHasChanged();
    }
}
