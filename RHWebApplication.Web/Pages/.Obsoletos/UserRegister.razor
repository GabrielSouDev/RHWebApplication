@inject NavigationManager NavigationManager
@inject JobService JobService
@inject AdminService AdminService
@inject EmployeeService EmployeeService
@inject CompanyService CompanyService
@inject CustomAuthStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@page "/UserRegister"
<PageTitle> Register a User</PageTitle>
<AuthorizeView Roles="Admin, Staff">
    <Authorized Context="authContext">
        @if (_isLoading)
        {
            <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            </MudContainer>
        }
        else
        {
            <MudCard Class="pt-5 pl-10" Style="width: 100%; height: 93vh;">
                <MudCardContent Class="start" Style="width: 50%;">
                    <MudForm Class="p-5" Model="@_userRequest">
                        <MudText Class="align-center" Typo="Typo.h5">Register a User</MudText>
                        <MudTextField @bind-Value="_userRequest.Name" Label="Name" Required="true" />
                        <MudTextField @bind-Value="_userRequest.Login" Label="Login" Required="true" />
                        <MudTextField @bind-Value="_userRequest.Password" Label="Password" InputType="InputType.Password" Required="true" />
                        <MudTextField @bind-Value="_userRequest.Email" Label="Email" For="@(()=> _userRequest.Email)"  Required="true" />
                        <MudSwipeArea Class="pt-6 d-flex justify-center flex-grow-1 gap-4 align-center">
                            <MudText Align="Align.Center">Employee</MudText>
                            <MudSwitch Color="Color.Primary" @bind-Value="_IsAdmin" />
                            <MudText Align="Align.Center">Admin</MudText>
                        </MudSwipeArea>

                        <MudTextField  Disabled="@(_IsAdmin)" T="int" @bind-Value="_userRequest.Dependents" Label="Dependents" Required="@(!_IsAdmin)" />
                        <MudSelect Disabled="@(_IsAdmin)" @bind-Value="_userRequest.JobTitle" Label="Job Title" Required="@(!_IsAdmin)">
                            @{
                                foreach(var job in _jobList)
                                {
                                    if(job is not null)
                                    {
                                        <MudSelectItem Value="@job">@job</MudSelectItem>
                                    }
                                }
                            }
                        </MudSelect>
                        <MudButton type="Submit" OnClick="SubmitUserAsync" Color="Color.Primary">Submit</MudButton>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        }
        <MudText Color="Color.Error">@_errorMenssage</MudText>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public UserInfo UserInfo { get; set; } = new();
    private EmployeeRequest _userRequest = new();
    private bool _IsAdmin = false;
    private string _errorMenssage = string.Empty;
    private List<string> _jobList = new();
    private bool _isLoading = true;
    private string _previousCompany;

    protected override async Task OnInitializedAsync()
    {
        _previousCompany = UserInfo.Company;
        await LoadJobsAsync();
    }

    protected override void OnParametersSet()
    {
        if (UserInfo.Company != null && UserInfo.Company != _previousCompany)
        {
            _previousCompany = UserInfo.Company;
            _ = LoadJobsAsync();
        }
    }

    private async Task LoadJobsAsync()
    {
        _isLoading = true;
        var jobs = await JobService.GetJobTitlesByCompany(UserInfo.Company);
        if (jobs is not null)
            _jobList = jobs;
        _isLoading = false;
        StateHasChanged();
    }

    public async Task SubmitUserAsync()
    {
        _errorMenssage = string.Empty;
        HttpResponseMessage? response = null;   
        if (_IsAdmin) //admin
        {
            AdminRequest adminRequest = new(_userRequest.Login, _userRequest.Password, _userRequest.Name, _userRequest.Email, UserInfo.Company);
             response = await AdminService.PostAdmin(adminRequest); 
        }
        else //employee
        {
            if (_userRequest.JobTitle is not null)
            {
                response = await EmployeeService.PostEmployee(_userRequest);
            }
            else
            {
                _errorMenssage = "Necessary choice a Job Title to register a employee!";
                Snackbar.Add("Necessary choice a Job Title to register a employee!", Severity.Error);
            }
        }

        if(response is not null)
        {
            if (!response.IsSuccessStatusCode)
            {
                if (response.RequestMessage is not null)
                {
                    _errorMenssage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add("User has not Registred!", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("User has been successfully Registered!", Severity.Success);
                _userRequest = new EmployeeRequest();
            }
        }

    }
}
